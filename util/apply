#!/bin/bash

# Script to apply `bin` configs to the system

# Run installation commands
if type apt
then
   sudo bash ~/bin/util/apt
elif type yum
then
   sudo bash ~/bin/util/yum
else
   echo "Unknown package manager"
   exit
fi

function link() {
   if [ -f ~/bin/$1 ]
   then
      mkdir -p $(dirname $2)
      ln -sf $HOME/bin/$1 $2
   fi
}

# Make git-ignored dirs
mkdir -p ~/bin/install/
mkdir -p ~/.zfunc

# Check for rust installation
if type rustup
then
   rustup update
else
   curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
   rustup update
fi
rustup completions bash rustup | sudo tee /etc/bash_completion.d/rustup.sh
rustup completions zsh > ~/.zfunc/_rustup

rustup completions bash cargo | sudo tee /etc/bash_completion.d/cargo.sh
rustup completions zsh cargo > ~/.zfunc/_cargo

function rust-git-install() {
   # Clone/pull
   if [ ! -d ~/bin/install/$2/ ]; then
      git clone https://github.com/$1/$2 ~/bin/install/$2/
   else
      cd ~/bin/install/$2
      git pull
   fi
   # Build
   cd ~/bin/install/$2
   cargo build --release
}

rust-git-install TomasTomecek pretty-git-prompt 
rust-git-install the10thwiz arg-adjuster
rust-git-install the10thwiz git-remote-url

mkdir -p ~/.config
if [ -f ~/bin/config/pretty-git-prompt.yml ]
then
   ln -sf ~/bin/config/pretty-git-prompt.yml ~/.config/pretty-git-prompt.yml
fi

mkdir -p ~/.config/nvim/
if [ -f ~/.config/nvim/init.lua ]
then
(
  cd ~/.config/nvim/
  git pull --ff-only
)
else 
  rm -rf ~/.config/nvim
  git clone https://github.com/AstroNvim/AstroNvim ~/.config/nvim
fi

link config/init.lua ~/.config/nvim/lua/user/init.lua
nvim +PackerSync

## oh-my-zsh
#if [ ! -d ~/.oh-my-zsh/ ]; then
   #sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
#fi

# Link rc files to where they belong
link config/bashrc ~/.bashrc
link config/Xmodmap ~/.Xmodmap
# link config/init.vim ~/.config/nvim/init.vim
# link config/indent_line.vim ~/.config/nvim/plugin/indent_line.vim
# link config/coc_fzf_outline.vim ~/.config/nvim/plugin/coc_fzf_outline.vim
link config/rust.vim ~/.config/nvim/after/syntax/rust.vim
link config/json.vim ~/.config/nvim/syntax/json.vim
link config/squirrel.vim ~/.config/nvim/syntax/squirrel.vim
link config/tera.vim ~/.config/nvim/syntax/tera.vim
link config/ftdetect.vim ~/.config/nvim/ftdetect/custom.vim
link config/kitty.conf ~/.config/kitty/kitty.conf
link config/zshrc ~/.zshrc
link config/zshenv ~/.zshenv
link config/personal.zsh-theme ~/.oh-my-zsh/themes/personal.zsh-theme
link config/i3config ~/.config/i3/config
link config/indentpath.yaml ~/.indentconfig.yaml
link config/gdbinit ~/.gdbinit
link config/condarc ~/.condarc

link audio ~/.local/bin/audio
link brightnessctl ~/.local/bin/brightnessctl
link colors ~/.local/bin/colors
link deploy ~/.local/bin/deploy
link file_paste ~/.local/bin/file_paste
# link hpScreen ~/.local/bin/hpScreen
# link llvmenv ~/.local/bin/llvmenv
# link nxgmake ~/.local/bin/nxgmake
link text_paste ~/.local/bin/text_paste
link vi ~/.local/bin/vi
# link yakuakeToggle ~/.local/bin/yakuakeToggle
link config/helix_config.toml ~/.config/helix/config.toml
link config/helix_languages.toml ~/.config/helix/languages.toml
link vi ~/.local/bin/vi

if type wslsys &> /dev/null
then
  link wsl_download ~/.local/bin/wsl_download
  link wsl_run ~/.local/bin/wsl_run
fi

# Apply Git config options
if type nvim
then
   git config --global core.editor "nvim"
elif type vi
then
   git config --global core.editor "vi"
fi
git config --global user.name "Matthew Pomes"
git config --global user.email "matthew.pomes@pm.me"
git config --global pull.ff only
git config --global core.excludesFile "$HOME/bin/config/gitignore"
git config --global alias.co 'checkout'
git config --global alias.s 'status'
git config --global alias.a 'add'
git config --global alias.unadd 'restore --staged'
git config --global alias.ls '!fd'
git config --global alias.br 'branch'
git config --global rerere.enabled true
git config --global init.defaultBranch 'main'

# Install vim plugins
# sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
#        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
# nvim -c 'PlugInstall'

# install vscode extensions
#bash ~/bin/util/vscode

